generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoRegistro {
  CRM
  CRN
  CREFITO
  CRP
}

model Paciente {
  id              String            @id @default(uuid()) @db.Uuid
  dataNascimento  DateTime          @db.Date
  peso            Float
  altura          Float
  usuarios        Usuario[]         @relation("PacienteUsuario")
  agendamentos    Consulta[]
  HistoricoMedico HistoricoMedico[]
}

model Profissional {
  id                   String            @id @default(uuid()) @db.Uuid
  tipoRegistro         TipoRegistro
  numeroRegistro       String
  uf                   String
  descricao            String
  instituicaoFormadora String
  tipoProfissional     String
  especialidade        String
  usuarios             Usuario[]         @relation("ProfissionalUsuario")
  agendamentos         Consulta[]
  HistoricoMedico      HistoricoMedico[]
}

model Usuario {
  id             String  @id @default(uuid()) @db.Uuid
  nome           String
  email          String  @unique
  senha          String
  telefone       String
  avatar         String?
  genero         String
  profissionalId String? @db.Uuid
  pacienteId     String? @db.Uuid

  profissional Profissional?     @relation("ProfissionalUsuario", fields: [profissionalId], references: [id])
  paciente     Paciente?         @relation("PacienteUsuario", fields: [pacienteId], references: [id])
  enderecos    EnderecoUsuario[]
}

model Clinica {
  id                String            @id @default(uuid()) @db.Uuid
  nomeFantasia      String
  razaoSocial       String
  cnpj              String
  inscricaoEstadual String
  telefone          String
  tipoAtendimento   String
  enderecos         EnderecoClinica[]
}

model DiaSemana {
  id              String            @id @default(uuid()) @db.Uuid
  dia             String
  Disponibilidade Disponibilidade[]
}

model Disponibilidade {
  id          String   @id @default(uuid()) @db.Uuid
  diaSemanaId String   @db.Uuid
  horaInicio  DateTime @db.Time(0)
  horaFim     DateTime @db.Time(0)

  diaSemana DiaSemana @relation(fields: [diaSemanaId], references: [id])
}

model Endereco {
  id          String            @id @default(uuid()) @db.Uuid
  rua         String
  bairro      String
  cep         String
  complemento String
  estado      String
  cidade      String
  numero      String
  usuarios    EnderecoUsuario[]
  clinicas    EnderecoClinica[]
}

model EnderecoUsuario {
  id         String @id @default(uuid()) @db.Uuid
  usuarioId  String @db.Uuid
  enderecoId String @db.Uuid

  usuario  Usuario  @relation(fields: [usuarioId], references: [id])
  endereco Endereco @relation(fields: [enderecoId], references: [id])
}

model EnderecoClinica {
  id         String @id @default(uuid()) @db.Uuid
  clinicaId  String @db.Uuid
  enderecoId String @db.Uuid

  clinica  Clinica  @relation(fields: [clinicaId], references: [id])
  endereco Endereco @relation(fields: [enderecoId], references: [id])
}

model Consulta {
  id             String   @id @default(uuid()) @db.Uuid
  data           DateTime @db.Date
  horaInicio     DateTime @db.Time(0)
  horaFim        DateTime @db.Time(0)
  turno          String
  tipoConsulta   String
  observacao     String?
  motivo         String
  avaliacao      String?
  valor          Float?
  status         String
  pacienteId     String   @db.Uuid
  profissionalId String   @db.Uuid

  paciente        Paciente          @relation(fields: [pacienteId], references: [id])
  profissional    Profissional      @relation(fields: [profissionalId], references: [id])
  HistoricoMedico HistoricoMedico[]
}

model HistoricoMedico {
  id                     String   @id @default(uuid()) @db.Uuid
  data                   DateTime @db.Date
  tipoRegistro           String
  diagnostico            String
  sintomas               String
  tratamentoPrescrito    String
  medicamentos           String
  resultadosExames       String
  observacoes            String
  alergias               String
  antecedentesFamiliares String
  status                 String
  pacienteId             String   @db.Uuid
  profissionalId         String   @db.Uuid
  consultaId             String   @db.Uuid

  paciente     Paciente     @relation(fields: [pacienteId], references: [id])
  profissional Profissional @relation(fields: [profissionalId], references: [id])
  consulta     Consulta     @relation(fields: [consultaId], references: [id])
}
